<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.example.evcs.event.model.dao.EventMapper">

	<sql id="eventColumn">
		SELECT 
			  E.EVENT_NO eventNo
			, E.MEMBER_NO memberNo
			, E.EVENT_NAME eventName
			, E.START_DATE startDate
			, E.END_DATE endDate
			, E.EVENT_CONTENT eventContent
			, E.ENROLL_DATE enrollDate
			, E.STATUS status
			, M.MEMBER_NICKNAME memberNickname
			, F.FILE_LOAD filePath
			, CASE 
				WHEN E.STATUS = 'Y' THEN '진행중'
				WHEN E.STATUS = 'N' THEN '마감'
				ELSE '알수없음'
			  END AS statusName
			, STATUS
	</sql>

	<insert id="insertEvent"
		parameterType="Event"
	>
		INSERT INTO EV_EVENT VALUES(
			  SEQ_EV_EVENT.NEXTVAL
			, #{ memberNo }
			, #{ eventName }
			, #{ startDate }
			, #{ endDate }
			, #{ eventContent }
			, SYSDATE
			, 'Y'
		)
	</insert>
	
	<insert id="insertEventFile"
		parameterType="string"
	>
		INSERT INTO EV_EVENT_FILE VALUES(
			  SEQ_EV_EVENT.CURRVAL
			, #{ changeFileName }
		)
	</insert>
	
	<select id="selctEventAll"
			parameterType="map"
			resultType="EventDTO"
	>
		<include refid="eventColumn" />
		
		FROM 
			EV_EVENT E
		JOIN 
			EV_MEMBER M 
		ON 
			(E.MEMBER_NO = M.MEMBER_NO)	
		LEFT JOIN 
			EV_EVENT_FILE F 
		ON 
			(E.EVENT_NO = F.EVENT_NO)
		WHERE 1=1
		<choose>
		  <when test="category eq 'eventName'">
		    AND EVENT_NAME LIKE '%' || #{searchKeyword} || '%'
		  </when>
		  <when test="category eq 'eventContent'">
		    AND EVENT_CONTENT LIKE '%' || #{searchKeyword} || '%'
		  </when>
		</choose>
		<choose>
			<when test="ingCategory neq 'allEvent'">
				<if test="ingCategory eq 'ingEvent'">
					AND STATUS = 'Y'
				</if>
				<if test="ingCategory eq 'endEvent'">
					AND STATUS = 'N'
				</if>
			</when>
		</choose>
		ORDER BY 
			E.EVENT_NO ASC
	</select>
	
	<select id="selectByEventNo"
			parameterType="long"
			resultType="EventDTO"
	>
		<include refid="eventColumn" />
		FROM
			EV_EVENT E
		JOIN 
			EV_MEMBER M 
			ON 
				(E.MEMBER_NO = M.MEMBER_NO)
		LEFT JOIN 
    			EV_EVENT_FILE F 
    		ON 
    			(E.EVENT_NO = F.EVENT_NO)
		WHERE
			EVENT_NO = #{ eventNo }
		AND
			STATUS = 'Y'
	</select>
	
	<update id="updateEvent"
			parameterType="Event"
	>
		UPDATE 
				EV_EVENT 
			SET
				  EVENT_NAME = #{ eventName }
				, START_DATE = #{ startDate }
				, END_DATE = #{ endDate }
				, EVENT_CONTENT = #{ eventContent }
		WHERE 
			EVENT_NO = #{ eventNo }
	</update>
	
	<update id="updateEventFile"
			parameterType="map"
	>
		UPDATE
				EV_EVENT_FILE
			SET
				FILE_LOAD = #{ filePath }
		WHERE EVENT_NO = #{ eventNo }
	</update>
	
	<update id="deleteByEventNo"
			parameterType="long"
	>
		UPDATE 
				EV_EVENT
			SET
				STATUS = 'N'
		WHERE 
			EVENT_NO = #{ eventNo }
	</update>
	
	<select id="selectTotalCount"
			parameterType="map"
			resultType="_int"
	>
		SELECT 
				COUNT(EVENT_NO)
		FROM 
			EV_EVENT
		WHERE 1 = 1
 		<choose>
		  <when test="category eq 'eventName'">
		    AND EVENT_NAME LIKE '%' || #{searchKeyword} || '%'
		  </when>
		  <when test="category eq 'eventContent'">
		    AND EVENT_CONTENT LIKE '%' || #{searchKeyword} || '%'
		  </when>
		</choose>
				<choose>
			<when test="ingCategory neq 'allEvent'">
				<if test="ingCategory eq 'ingEvent'">
					AND STATUS = 'Y'
				</if>
				<if test="ingCategory eq 'endEvent'">
					AND STATUS = 'N'
				</if>
			</when>
		</choose>
	</select>
	
	<select id="selctEventAllUser"
			parameterType="map"
			resultType="EventDTO"
	>
		<include refid="eventColumn" />
		
		FROM 
			EV_EVENT E
		JOIN 
			EV_MEMBER M 
		ON 
			(E.MEMBER_NO = M.MEMBER_NO)	
		LEFT JOIN 
			EV_EVENT_FILE F 
		ON 
			(E.EVENT_NO = F.EVENT_NO)
		WHERE 1=1
			AND STATUS = 'Y'
		ORDER BY 
			E.ENROLL_DATE ASC
	</select>
	
	<select id="selectTotalCountUser"
			parameterType="_int"
			resultType="_int"
	>
		SELECT 
				COUNT(EVENT_NO)
		FROM 
			EV_EVENT
		WHERE 1 = 1
			AND STATUS = 'Y'
	</select>
</mapper>